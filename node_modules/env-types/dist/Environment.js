"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environment = void 0;
/**
 * Environment variables with type conversion.
 * Has all the environment variables as properties.
 * Supports number, boolean string, null, undefined, array and object (JSON).
 *
 * If you're not adding the environment variables before script execution, you'll need to call the load method.
 *
 * @example
 * import { Environment } from 'env-types';
 *
 * // If you're not adding the environment variables before script execution,
 * // you'll need to call the load method. Like this:
 * import dotenv from 'dotenv';
 * dotenv.config();
 * Environment.load();
 *
 * console.log(`Number: ${Environment.NUMBER} - Type: ${typeof Environment.NUMBER}`);
 * console.log(`Boolean: ${Environment.BOOLEAN} - Type: ${typeof Environment.BOOLEAN}`);
 * console.log(`String: ${Environment.STRING} - Type: ${typeof Environment.STRING}`);
 */
class Environment {
    /**
     * Loads the environment variables.
     *
     * @param {Object} config The configuration object.
     * @param {boolean} config.binaryToBooleans If true, it will convert 1 and 0 to booleans.
     * @param {boolean} config.emptyStringsToNull If true, it will convert empty strings to null.
     *
     * @returns {Environment} The Environment class with the environment variables as properties.
     */
    static load(config = {
        // If true, it will convert 1 and 0 to booleans.
        binaryToBooleans: true,
        // If true, it will convert empty strings to null.
        emptyStringsToNull: true
    }) {
        var _b;
        // Get the current environment variables.
        const env = process.env;
        // Loop through the environment variables.
        for (const key in env) {
            // Get the value.
            const value = (_b = env[key]) !== null && _b !== void 0 ? _b : '';
            // Check if the value is a boolean.
            const lowerCaseValue = value.trim().toLowerCase();
            if (lowerCaseValue === 'true') {
                Environment[key] = true;
                continue;
            }
            else if (lowerCaseValue === 'false') {
                Environment[key] = false;
                continue;
            }
            // Check if the value is a binary boolean.
            if (config.binaryToBooleans) {
                if (lowerCaseValue === '1') {
                    Environment[key] = true;
                    continue;
                }
                else if (lowerCaseValue === '0') {
                    Environment[key] = false;
                    continue;
                }
            }
            // Check if the value is null.
            if (lowerCaseValue === 'null' || (config.emptyStringsToNull && lowerCaseValue === '')) {
                Environment[key] = null;
                continue;
            }
            // Check if the value is undefined.
            if (lowerCaseValue === 'undefined') {
                Environment[key] = undefined;
                continue;
            }
            // Check if the value is a number.
            const number = Number(value);
            if (!isNaN(number)) {
                Environment[key] = number;
                continue;
            }
            // Check if the value is an array or object (JSON).
            try {
                const json = JSON.parse(value);
                Environment[key] = json;
                continue;
            }
            catch (_c) {
                // Do nothing.
            }
            // The value is a string.
            Environment[key] = value;
        }
        return Environment;
    }
}
exports.Environment = Environment;
_a = Environment;
(() => {
    _a.load();
})();
